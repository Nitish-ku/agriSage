import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Send, Bot, User, Award } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";
import type { User as SupabaseUser } from '@supabase/supabase-js';
import { Language } from "@/hooks/useLanguage";

interface Message {
  id: string;
  type: "user" | "bot";
  content: string;
  badge?: string;
  timestamp: Date;
}

interface ChatInterfaceProps {
  language: Language;
}

export const ChatInterface = ({ language }: ChatInterfaceProps) => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [currentMessage, setCurrentMessage] = useState("");
  const [queryCount, setQueryCount] = useState(0);
  const [user, setUser] = useState<SupabaseUser | null>(null);
  const [loading, setLoading] = useState(false);
  const { toast } = useToast();

  useEffect(() => {
    // Get current user and load previous messages
    const getCurrentUser = async () => {
      const { data: { user } } = await supabase.auth.getUser();
      if (user) {
        setUser(user);
        await loadMessages(user.id);
        await loadQueryCount(user.id);
      }
    };
    getCurrentUser();
  }, [language]);

  const loadMessages = async (userId: string) => {
    try {
      const { data, error } = await supabase
        .from('farmer_queries')
        .select('*')
        .eq('user_id', userId)
        .order('created_at', { ascending: true })
        .limit(20);

      if (error) throw error;

      const formattedMessages: Message[] = [];
      
      // Add welcome message
      formattedMessages.push({
        id: "welcome",
        type: "bot",
        content: language === "en" 
          ? "Hello! I'm your AgriSage assistant. Ask me about crops, pests, fertilizers, or farming techniques."
          : language === "ml"
            ? "‡¥®‡¥Æ‡¥∏‡µç‡¥ï‡¥æ‡¥∞‡¥Ç! ‡¥û‡¥æ‡µª ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥Ö‡¥ó‡µç‡¥∞‡¥ø‡¥∏‡µá‡¥ú‡µç ‡¥∏‡¥π‡¥æ‡¥Ø‡¥ï‡¥®‡¥æ‡¥£‡µç. ‡¥µ‡¥ø‡¥≥‡¥ï‡µæ, ‡¥ï‡µÄ‡¥ü‡¥ô‡µç‡¥ô‡µæ, ‡¥µ‡¥≥‡¥ô‡µç‡¥ô‡µæ ‡¥Ö‡¥≤‡µç‡¥≤‡µÜ‡¥ô‡µç‡¥ï‡¥ø‡µΩ ‡¥ï‡¥æ‡µº‡¥∑‡¥ø‡¥ï ‡¥∏‡¥æ‡¥ô‡µç‡¥ï‡µá‡¥§‡¥ø‡¥ï‡¥§‡¥ï‡¥≥‡µÜ‡¥ï‡µç‡¥ï‡µÅ‡¥±‡¥ø‡¥ö‡µç‡¥ö‡µç ‡¥é‡¥®‡µç‡¥®‡µã‡¥ü‡µç ‡¥ö‡µã‡¥¶‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï."
            : "‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§è‡§ó‡•ç‡§∞‡•Ä‡§∏‡•á‡§ú ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§π‡•Ç‡§Ç‡•§ ‡§Æ‡•Å‡§ù‡§∏‡•á ‡§´‡§∏‡§≤‡•ã‡§Ç, ‡§ï‡•Ä‡§ü‡•ã‡§Ç, ‡§â‡§∞‡•ç‡§µ‡§∞‡§ï‡•ã‡§Ç ‡§Ø‡§æ ‡§ï‡•É‡§∑‡§ø ‡§§‡§ï‡§®‡•Ä‡§ï‡•ã‡§Ç ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§™‡•Ç‡§õ‡•á‡§Ç‡•§",
        timestamp: new Date()
      });

      data?.forEach(query => {
        // Add user message
        formattedMessages.push({
          id: `user-${query.id}`,
          content: query.query_text,
          type: 'user',
          timestamp: new Date(query.created_at)
        });
        
        // Add bot response if exists
        if (query.ai_response) {
          formattedMessages.push({
            id: `bot-${query.id}`,
            content: query.ai_response,
            type: 'bot',
            timestamp: new Date(query.created_at)
          });
        }
      });

      setMessages(formattedMessages);
    } catch (error) {
      console.error('Error loading messages:', error);
    }
  };

  const loadQueryCount = async (userId: string) => {
    try {
      const { count, error } = await supabase
        .from('farmer_queries')
        .select('*', { count: 'exact', head: true })
        .eq('user_id', userId);

      if (error) throw error;
      setQueryCount(count || 0);
    } catch (error) {
      console.error('Error loading query count:', error);
    }
  };

  const responses = {
    en: {
      banana: "For banana leaf spot, use Mancozeb 75% WP @ 2g/L water. Spray during evening hours to avoid leaf burn.",
      rice: "For rice blast disease, apply Tricyclazole 75% WP @ 0.6g/L. Ensure proper drainage in fields.",
      coconut: "For coconut root wilt, apply Trichoderma viride @ 50g per palm around root zone.",
      pepper: "For black pepper quick wilt, use Bordeaux mixture 1% spray and improve drainage.",
      default: "Thank you for your query! For specific advice on crops, pests, or diseases, please provide more details about your farming concern."
    },
    ml: {
      banana: "‡¥µ‡¥æ‡¥¥‡¥Ø‡µÅ‡¥ü‡µÜ ‡¥á‡¥≤‡¥™‡µç‡¥™‡µÅ‡¥≥‡µç‡¥≥‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥Æ‡¥æ‡µª‡¥ï‡µã‡¥∏‡µÜ‡¥¨‡µç 75% WP @ 2g/L ‡¥µ‡µÜ‡¥≥‡µç‡¥≥‡¥§‡µç‡¥§‡¥ø‡µΩ. ‡¥∏‡¥®‡µç‡¥ß‡µç‡¥Ø‡¥æ‡¥∏‡¥Æ‡¥Ø‡¥§‡µç‡¥§‡µç ‡¥∏‡µç‡¥™‡µç‡¥∞‡µá ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï.",
      rice: "‡¥®‡µÜ‡¥≤‡µç‡¥≤‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥¨‡µç‡¥≤‡¥æ‡¥∏‡µç‡¥±‡µç‡¥±‡µç ‡¥∞‡µã‡¥ó‡¥§‡µç‡¥§‡¥ø‡¥®‡µç ‡¥ü‡µç‡¥∞‡µà‡¥∏‡µà‡¥ï‡µç‡¥≤‡¥æ‡¥∏‡µã‡µæ 75% WP @ 0.6g/L ‡¥™‡µç‡¥∞‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.",
      coconut: "‡¥§‡µÜ‡¥ô‡µç‡¥ô‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥µ‡µá‡¥∞‡µç ‡¥µ‡¥æ‡¥ü‡µç‡¥ü‡¥§‡µç‡¥§‡¥ø‡¥®‡µç ‡¥ü‡µç‡¥∞‡µà‡¥ï‡µç‡¥ï‡µã‡¥°‡µÜ‡µº‡¥Æ ‡¥µ‡¥ø‡¥∞‡¥ø‡¥°‡µÜ @ 50g ‡¥µ‡µá‡¥∞‡¥ø‡¥®‡µç ‡¥ö‡µÅ‡¥±‡µç‡¥±‡µÅ‡¥Ç.",
      pepper: "‡¥ï‡µÅ‡¥∞‡µÅ‡¥Æ‡µÅ‡¥≥‡¥ï‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥™‡µÜ‡¥ü‡µç‡¥ü‡µÜ‡¥®‡µç‡¥®‡µÅ‡¥≥‡µç‡¥≥ ‡¥µ‡¥æ‡¥ü‡µç‡¥ü‡¥§‡µç‡¥§‡¥ø‡¥®‡µç ‡¥¨‡µã‡µº‡¥°‡µã ‡¥Æ‡¥ø‡¥∂‡µç‡¥∞‡¥ø‡¥§‡¥Ç 1% ‡¥∏‡µç‡¥™‡µç‡¥∞‡µá ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï.",
      default: "‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥ö‡µã‡¥¶‡µç‡¥Ø‡¥§‡µç‡¥§‡¥ø‡¥®‡µç ‡¥®‡¥®‡µç‡¥¶‡¥ø! ‡¥µ‡¥ø‡¥≥‡¥ï‡µæ, ‡¥ï‡µÄ‡¥ü‡¥ô‡µç‡¥ô‡µæ, ‡¥∞‡µã‡¥ó‡¥ô‡µç‡¥ô‡µæ ‡¥é‡¥®‡µç‡¥®‡¥ø‡¥µ‡¥Ø‡µÜ‡¥ï‡µç‡¥ï‡µÅ‡¥±‡¥ø‡¥ö‡µç‡¥ö‡µç ‡¥ï‡µÇ‡¥ü‡µÅ‡¥§‡µΩ ‡¥µ‡¥ø‡¥µ‡¥∞‡¥ô‡µç‡¥ô‡µæ ‡¥®‡µΩ‡¥ï‡µÅ‡¥ï."
    },
    hi: {
      banana: "‡§ï‡•á‡§≤‡•á ‡§ï‡•á ‡§™‡§§‡•ç‡§§‡•á ‡§ï‡•á ‡§ß‡§¨‡•ç‡§¨‡•á ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§Æ‡•à‡§Ç‡§ï‡•ã‡§ú‡•á‡§¨ 75% WP @ 2g/L ‡§™‡§æ‡§®‡•Ä ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§∂‡§æ‡§Æ ‡§ï‡•á ‡§∏‡§Æ‡§Ø ‡§∏‡•ç‡§™‡•ç‡§∞‡•á ‡§ï‡§∞‡•á‡§Ç‡•§",
      rice: "‡§ß‡§æ‡§® ‡§¨‡•ç‡§≤‡§æ‡§∏‡•ç‡§ü ‡§∞‡•ã‡§ó ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§ü‡•ç‡§∞‡§æ‡§á‡§∏‡§æ‡§á‡§ï‡•ç‡§≤‡§æ‡§ú‡•ã‡§≤ 75% WP @ 0.6g/L ‡§≤‡§ó‡§æ‡§è‡§Ç‡•§ ‡§ñ‡•á‡§§‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§â‡§ö‡§ø‡§§ ‡§®‡§ø‡§ï‡§æ‡§∏‡•Ä ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§",
      coconut: "‡§®‡§æ‡§∞‡§ø‡§Ø‡§≤ ‡§ú‡§°‡§º ‡§Æ‡•Å‡§∞‡§ù‡§æ‡§® ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§ü‡•ç‡§∞‡§æ‡§á‡§ï‡•ã‡§°‡§∞‡•ç‡§Æ‡§æ ‡§µ‡§ø‡§∞‡§æ‡§á‡§° @ 50g ‡§™‡•ç‡§∞‡§§‡§ø ‡§π‡§•‡•á‡§≤‡•Ä ‡§ú‡§°‡§º ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§ï‡•á ‡§ö‡§æ‡§∞‡•ã‡§Ç ‡§ì‡§∞ ‡§≤‡§ó‡§æ‡§è‡§Ç‡•§",
      pepper: "‡§ï‡§æ‡§≤‡•Ä ‡§Æ‡§ø‡§∞‡•ç‡§ö ‡§ï‡•á ‡§§‡§§‡•ç‡§ï‡§æ‡§≤ ‡§Æ‡•Å‡§∞‡§ù‡§æ‡§® ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§¨‡•ã‡§∞‡•ç‡§°‡•ã ‡§Æ‡§ø‡§∂‡•ç‡§∞‡§£ 1% ‡§∏‡•ç‡§™‡•ç‡§∞‡•á ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§ú‡§≤ ‡§®‡§ø‡§ï‡§æ‡§∏‡•Ä ‡§Æ‡•á‡§Ç ‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç‡•§",
      default: "‡§Ü‡§™‡§ï‡•Ä ‡§™‡•Ç‡§õ‡§§‡§æ‡§õ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶! ‡§´‡§∏‡§≤‡•ã‡§Ç, ‡§ï‡•Ä‡§ü‡•ã‡§Ç, ‡§Ø‡§æ ‡§¨‡•Ä‡§Æ‡§æ‡§∞‡§ø‡§Ø‡•ã‡§Ç ‡§™‡§∞ ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§∏‡§≤‡§æ‡§π ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§ß‡§ø‡§ï ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç‡•§"
    }
  };

  const badges = [
    { name: "Farm Expert", condition: 3, icon: "üèÜ" },
    { name: "Crop Master", condition: 5, icon: "üåæ" },
    { name: "Kerala Farmer", condition: 10, icon: "ü••" }
  ];

  const getAIResponse = async (query: string): Promise<{ response: string; badge?: string }> => {
    try {
      const { data, error } = await supabase.functions.invoke('agricultural-chat', {
        body: { query, language }
      });

      if (error) throw error;

      // Check for badge eligibility
      const newQueryCount = queryCount + 1;
      const eligibleBadge = badges.find(badge => newQueryCount === badge.condition);

      return { 
        response: data.response, 
        badge: eligibleBadge?.name 
      };
    } catch (error) {
      console.error('AI response error:', error);
      return { 
        response: responses[language].default 
      };
    }
  };

  const handleSendMessage = async () => {
    if (!currentMessage.trim() || !user || loading) return;

    setLoading(true);
    const userMessage: Message = {
      id: Date.now().toString(),
      type: "user",
      content: currentMessage,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);

    try {
      // Get AI response
      const { response, badge } = await getAIResponse(currentMessage);
      
      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: "bot",
        content: response,
        badge,
        timestamp: new Date()
      };

      // Save query to database
      const { error } = await supabase
        .from('farmer_queries')
        .insert({
          user_id: user.id,
          query_text: currentMessage,
          query_language: language,
          query_type: 'text',
          ai_response: response,
          response_language: language,
          confidence_score: Math.random() * 0.3 + 0.7, // Mock confidence between 0.7-1.0
        });

      if (error) throw error;

      setMessages(prev => [...prev, botMessage]);
      const newCount = queryCount + 1;
      setQueryCount(newCount);

      // Check for badge achievement
      if (badge) {
        await awardBadge(user.id, badge);
        toast({
          title: language === 'en' ? 'üéâ Badge Earned!' : 'üéâ ‡¥¨‡¥æ‡¥°‡µç‡¥ú‡µç ‡¥®‡µá‡¥ü‡¥ø!',
          description: badge,
        });
      }

    } catch (error) {
      console.error('Error sending message:', error);
      toast({
        title: language === 'en' ? 'Error' : '‡¥™‡¥ø‡¥∂‡¥ï‡µç',
        description: language === 'en' ? 'Failed to send message' : '‡¥∏‡¥®‡µç‡¥¶‡µá‡¥∂‡¥Ç ‡¥Ö‡¥Ø‡¥Ø‡µç‡¥ï‡µç‡¥ï‡¥æ‡µª ‡¥ï‡¥¥‡¥ø‡¥û‡µç‡¥û‡¥ø‡¥≤‡µç‡¥≤',
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
      setCurrentMessage("");
    }
  };

  const awardBadge = async (userId: string, badgeName: string) => {
    try {
      await supabase
        .from('user_badges')
        .insert({
          user_id: userId,
          badge_type: 'chat_achievement',
          badge_name: badgeName,
        });
    } catch (error) {
      console.error('Error awarding badge:', error);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  return (
    <div className="max-w-4xl mx-auto">
      <Card className="h-[600px] flex flex-col">
        <CardHeader className="pb-4">
          <CardTitle className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <Bot className="h-5 w-5 text-kerala-primary" />
              <span>
                {language === "en" 
                  ? "Agricultural Expert Chat" 
                  : language === "ml" 
                    ? "‡¥ï‡¥æ‡µº‡¥∑‡¥ø‡¥ï ‡¥µ‡¥ø‡¥¶‡¥ó‡µç‡¥¶‡µç‡¥ß ‡¥ö‡¥æ‡¥±‡µç‡¥±‡µç" 
                    : "‡§ï‡•É‡§∑‡§ø ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§ö‡•à‡§ü"
                }
              </span>
            </div>
            <Badge variant="secondary">
              {language === "en" 
                ? `${queryCount}/10 queries today` 
                : language === "ml" 
                  ? `${queryCount}/10 ‡¥á‡¥®‡µç‡¥®‡¥§‡µç‡¥§‡µÜ ‡¥ö‡µã‡¥¶‡µç‡¥Ø‡¥ô‡µç‡¥ô‡µæ` 
                  : `${queryCount}/10 ‡§Ü‡§ú ‡§ï‡•á ‡§™‡•ç‡§∞‡§∂‡•ç‡§®`
              }
            </Badge>
          </CardTitle>
        </CardHeader>

        <CardContent className="flex-1 flex flex-col space-y-4">
          <ScrollArea className="flex-1 pr-4">
            <div className="space-y-4">
              {messages.map((message) => (
                <div key={message.id} className={`flex ${message.type === "user" ? "justify-end" : "justify-start"}`}>
                  <div className={`max-w-[80%] rounded-lg p-3 ${
                    message.type === "user" 
                      ? "bg-kerala-primary text-white" 
                      : "bg-muted"
                  }`}>
                    <div className="flex items-start space-x-2">
                      {message.type === "bot" ? (
                        <Bot className="h-4 w-4 mt-1 text-kerala-primary" />
                      ) : (
                        <User className="h-4 w-4 mt-1" />
                      )}
                      <div className="flex-1">
                        <p className="text-sm">{message.content}</p>
                        {message.badge && (
                          <Badge className="mt-2 bg-kerala-accent text-white">
                            <Award className="h-3 w-3 mr-1" />
                            {message.badge}
                          </Badge>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </ScrollArea>

          <div className="flex space-x-2">
            <Input
              value={currentMessage}
              onChange={(e) => setCurrentMessage(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder={language === "en" 
                ? "Ask about crops, pests, diseases..." 
                : language === "ml" 
                  ? "‡¥µ‡¥ø‡¥≥‡¥ï‡µæ, ‡¥ï‡µÄ‡¥ü‡¥ô‡µç‡¥ô‡µæ, ‡¥∞‡µã‡¥ó‡¥ô‡µç‡¥ô‡¥≥‡µÜ‡¥ï‡µç‡¥ï‡µÅ‡¥±‡¥ø‡¥ö‡µç‡¥ö‡µç ‡¥ö‡µã‡¥¶‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï..." 
                  : "‡§´‡§∏‡§≤‡•ã‡§Ç, ‡§ï‡•Ä‡§ü‡•ã‡§Ç, ‡§¨‡•Ä‡§Æ‡§æ‡§∞‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§™‡•Ç‡§õ‡•á‡§Ç..."
              }
              className="flex-1"
            />
            <Button onClick={handleSendMessage} disabled={!currentMessage.trim() || loading}>
              <Send className="h-4 w-4" />
            </Button>
          </div>

          <div className="text-center text-xs text-muted-foreground">
            {language === "en" 
              ? "Example queries: 'Pesticide for banana?', 'Rice disease treatment', 'Coconut fertilizer'"
              : language === "ml"
                ? "‡¥â‡¥¶‡¥æ‡¥π‡¥∞‡¥£ ‡¥ö‡µã‡¥¶‡µç‡¥Ø‡¥ô‡µç‡¥ô‡µæ: '‡¥µ‡¥æ‡¥¥‡¥Ø‡µç‡¥ï‡µç‡¥ï‡µç ‡¥Æ‡¥∞‡µÅ‡¥®‡µç‡¥®‡µç?', '‡¥®‡µÜ‡¥≤‡µç‡¥≤‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥∞‡µã‡¥ó‡¥ö‡¥ø‡¥ï‡¥ø‡¥§‡µç‡¥∏', '‡¥§‡µÜ‡¥ô‡µç‡¥ô‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥µ‡¥≥‡¥Ç'"
                : "‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§™‡•ç‡§∞‡§∂‡•ç‡§®: '‡§ï‡•á‡§≤‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•Ä‡§ü‡§®‡§æ‡§∂‡§ï?', '‡§ß‡§æ‡§® ‡§∞‡•ã‡§ó ‡§â‡§™‡§ö‡§æ‡§∞', '‡§®‡§æ‡§∞‡§ø‡§Ø‡§≤ ‡§â‡§∞‡•ç‡§µ‡§∞‡§ï'"
            }
          </div>
        </CardContent>
      </Card>
    </div>
  );
};